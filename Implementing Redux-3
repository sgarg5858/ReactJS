Now we have added alert Reducer and actions to Redux now its time to do it for functions like Registration 

For  that we will first create Action Types 
export const REGISTER_SUCCESS= 'REGISTER_SUCCESS';
export const REGISTER_FAIL= 'REGISTER_FAIL';`

Then we have to Define AuthReducer for changing the state in an immutable way

import{REGISTER_SUCCESS,REGISTER_FAIL} from '../actions/types';

const initialState={
    token:localStorage.getItem('token'),
    isAuthenticated:null,
    loading:true,
    user:null
};

export default function(state=initialState,action){

    const{type,payload}=action;
    switch(type)
    {
        case REGISTER_SUCCESS:
            localStorage.setItem('token',payload.token);
            return{
                ...state,
                ...payload,
                isAuthenticated:true,
                loading:false
            };

        case REGISTER_FAIL:
            localStorage.removeItem('token');
            return{
                ...state,
                token:null,
                isAuthenticated:false,
                loading:false
            };
        
        default:
            return state;

    }
}
*********************************************************************************************************************
Now we have to define Actions so that we can dispatch actions to AuthReducer...

import axios from 'axios';
import {REGISTER_FAIL,REGISTER_SUCCESS} from './types';
import {setAlert} from './alert';
//Register User

export const register = ({name,email,password}) => async dispatch =>{
    const config={
        headers:{
            'Content-Type': 'application/json'
        }
    };
    const body = JSON.stringify({name,email,password});

    try{
        const res= await axios.post('http://localhost:5000/api/users',body,config);

        dispatch({
            type:REGISTER_SUCCESS,
            payload:res.data
        });
    }catch(error)
    {
        console.log(error.response.data.errors);
        const errors=error.response.data.errors;
        if(errors)
        {
            errors.forEach(error => dispatch(setAlert(error.msg,'danger')));
        }
        dispatch({
            type:REGISTER_FAIL
        })
    }
}

*********************************************************************************************************
Now Time to Dispatch Register Action from Component and we have to recieve register functions from actionvia connect from react-redux


export default connect(null,{setAlert,register})(Register);

 const onSubmit =(event)=>{
        //as bydefault this is submit...
        event.preventDefault();
        if(password !==password2)
        {
            console.log("Passwords do not match..");
            props.setAlert('Passwords do not match','danger');
        }
        else{
            props.register({name,email,password});
        }
    }
********************************************************************************************************************************
Now we will use other functionality when app start we should check for local storage in APP.js

For that we will create 2 types 

export const USER_LOADED= 'USER_LOADED';
export const AUTH_ERROR= 'AUTH_ERROR';

Now Actions for this

//LOAD_USER
export const loadUser = () => async dispatch =>{
    if(localStorage.token)
    {
        setAuthToken(localStorage.token);
    }
    try{
        const res=await axios.get('http://localhost:5000/api/auth');
        dispatch({
            type:USER_LOADED,
            payload:res.data
        });
    }catch(error)
    {
        dispatch({
            type:AUTH_ERROR
        });
    }
} 
****************************************************************************
Reducer Auth

import{REGISTER_SUCCESS,REGISTER_FAIL,USER_LOADED,AUTH_ERROR} from '../actions/types';

const initialState={
    token:localStorage.getItem('token'),
    isAuthenticated:null,
    loading:true,
    user:null
};

export default function(state=initialState,action){

    const{type,payload}=action;
    switch(type)
    {
        case USER_LOADED: 
            return{
                ...state,
                isAuthenticated:true,
                loading:false,
                user:payload
            };

        case REGISTER_SUCCESS:
            localStorage.setItem('token',payload.token);
            return{
                ...state,
                ...payload,
                isAuthenticated:true,
                loading:false
            };
            
        case AUTH_ERROR: 
        case REGISTER_FAIL:
            localStorage.removeItem('token');
            return{
                ...state,
                token:null,
                isAuthenticated:false,
                loading:false
            };
        
        default:
            return state;

    }
}
**********************************************************************************************
Create New Folder Utils
and new function in there to set headers and remove headers

import axios from 'axios';

const setAuthToken= (token) => {

    if(token)
    {
        axios.defaults.headers.common['x-auth-token']= token;
    }else{
        delete axios.defaults.headers.common['x-auth-token'];
    }
}

export default setAuthToken;

*****************************************************************************************************
Now we have to call this function when app starts and also execute load user once when App.js Starts.

App.js

import React,{Fragment,useEffect} from 'react';
import {BrowserRouter as Router,Route,Switch} from 'react-router-dom';
import {loadUser} from  './actions/auth';
import setAuthToken from './utils/setAuthToken';

if(localStorage.token)
{
    console.log("In App.js");
    setAuthToken(localStorage.token);
}
const App = () => {

  useEffect(()=>{
    store.dispatch(loadUser())
  },[]);

  return ();
}

export default App;

***************************************************************************************************************************
Now Login Functionality:

export const LOGIN_SUCCESS= 'LOGIN_SUCCESS';
export const LOGIN_FAIL= 'LOGIN_FAIL';

Login Action in Actions

//Login User
export const login = ({email,password}) => async dispatch =>{
    const config={
        headers:{
            'Content-Type': 'application/json'
        }
    };
    const body = JSON.stringify({email,password});

    try{
        const res= await axios.post('http://localhost:5000/api/users/login',body,config);

        dispatch({
            type:LOGIN_SUCCESS,
            payload:res.data
        });
    }catch(error)
    {
        console.log(error.response.data.errors);
        const errors=error.response.data.errors;
        if(errors)
        {
            errors.forEach(error => dispatch(setAlert(error.msg,'danger')));
        }
        dispatch({
            type:LOGIN_FAIL
        })
    }
}

Now Auth Reducer Handling These Action Types:
import{REGISTER_SUCCESS,REGISTER_FAIL,USER_LOADED,AUTH_ERROR,LOGIN_SUCCESS,LOGIN_FAIL} from '../actions/types';

const initialState={
    token:localStorage.getItem('token'),
    isAuthenticated:null,
    loading:true,
    user:null
};

export default function(state=initialState,action){

    const{type,payload}=action;
    switch(type)
    {
        case USER_LOADED: 
            return{
                ...state,
                isAuthenticated:true,
                loading:false,
                user:payload
            };
        case LOGIN_SUCCESS:
        case REGISTER_SUCCESS:
            localStorage.setItem('token',payload.token);
            return{
                ...state,
                ...payload,
                isAuthenticated:true,
                loading:false
            };
        case LOGIN_FAIL:
        case AUTH_ERROR: 
        case REGISTER_FAIL:
            localStorage.removeItem('token');
            return{
                ...state,
                token:null,
                isAuthenticated:false,
                loading:false
            };
        
        default:
            return state;

    }
}
*********************************************************************************************
Now when User is Authenticated We should redirect the user to Dashboard

import React,{Fragment,useState} from 'react'
import {Link, Redirect} from 'react-router-dom';
import {connect} from 'react-redux';
import PropTypes from 'prop-types';
import {login} from '../../actions/auth';

const Login = (props) => {

    const [formData,setFormData]=useState({
        email:'',
        password:'',
       
    });

    const{email,password}=formData;

    //using event.target.name will make this onChange work for all fields..
    const onChange = (event) => setFormData({...formData, [event.target.name]:event.target.value });

    const onSubmit =(event)=>{
        //as bydefault this is submit...
        event.preventDefault();
        console.log(formData);
        props.login({email,password});
    }
    //Redirect if Logged In
    if(props.isAuthenticated)
    {
        return <Redirect to="/dashboard" />
    }

    return (
        <Fragment>
            
                <h1 className="large text-primary">Sign In</h1>
                <p className="lead"><i className="fas fa-user"></i> Sign into Your Account</p>
                <form className="form" onSubmit={onSubmit}>
                    <div className="form-group">
                    <input
                        type="email"
                        placeholder="Email Address"
                        name="email"
                        required
                        value={email}
                        onChange={(event) => onChange(event)}
                    />
                    </div>
                    <div className="form-group">
                    <input
                        type="password"
                        placeholder="Password"
                        name="password"
                        value={password}
                        onChange={(event) => onChange(event)}
                    />
                    </div>
                <input type="submit" className="btn btn-primary" value="Login" />
            </form>
            <p className="my-1">
                Don't have an account? <Link to="/register">Sign Up</Link>
            </p>  
        </Fragment>
    )
}

Login.propTypes={
    login:PropTypes.func.isRequired,
    isAuthenticated:PropTypes.bool.isRequired
}
const mapStateToProps= state =>({
    isAuthenticated:state.auth.isAuthenticated
});
export default connect(mapStateToProps,{login })(Login);

*********************************************************************************************************************
LOGOUT:

export const LOGOUT= 'LOGOUT';

Actions:
//LOGOUT
export const logout = () => dispatch =>{
    dispatch({
        type:LOGOUT
    })
}
Reducer :

  case LOGOUT:
        case LOGIN_FAIL:
        case AUTH_ERROR: 
        case REGISTER_FAIL:
            localStorage.removeItem('token');
            return{
                ...state,
                token:null,
                isAuthenticated:false,
                loading:false
            };
   
  Navbar
  
  
  import React, { Fragment } from 'react'
import {Link} from 'react-router-dom';
import {connect} from 'react-redux';
import PropTypes from 'prop-types';
import {logout} from  '../../actions/auth';

const Navbar = (props) => {

    const {isAuthenticated,loading}=props.auth;

    const authLinks=(
        <ul>
            <li><a  onClick={props.logout} href='#'>
            <i class="fas fa-sign-out-alt"></i>{' '}
            <span className="hide-sm">Logout</span>
            </a></li>
        </ul>
    ); 
    const guestLinks=(
        <ul>
                    <li><a href="profiles.html">Developers</a></li>
                    <li>
                    <Link to="/register">Register</Link>
                        </li>
                    <li>
                    <Link to="/login">Login</Link>
                        </li>
                </ul>
    );

    return (
        <div>
            <nav className="navbar bg-dark">
                <h1>
                    <a href="index.html"><i className="fas fa-code"></i> DevConnector</a>
                </h1>
                 {!loading? <Fragment>{isAuthenticated?authLinks:guestLinks}</Fragment>:null }
            </nav>
        </div>
    )
};
Navbar.propTypes={
    logout:PropTypes.func.isRequired,
    auth:PropTypes.object.isRequired
}

const mapStateToProps= state =>({
    auth:state.auth
});
export default connect(mapStateToProps,{logout})(Navbar)
