Now Dashboard ia private Route Component should only be visible to users who are logged in...

We will Create a new component for this PrivateRoute

import React,{Component} from 'react'
import PropTypes from 'prop-types'
import {connect} from 'react-redux';
import {Route,Redirect} from 'react-router-dom';
const PrivateRoute = ({component:Component, auth, ...rest }) => {
    return (
       <Route {...rest} render={props => !auth.isAuthenticated && !auth.loading ? 
        (<Redirect to='/login' />) : (<Component {...props} />)}/>
    )
}

PrivateRoute.propTypes = {
    auth:PropTypes.object.isRequired
}
const mapStateToProps = state => ({
    auth:state.auth
})

export default connect(mapStateToProps)(PrivateRoute)

 <PrivateRoute exact path="/dashboard" component={Dashboard}/>
 
 ************************************************************************************************************************************
 Now as soon as the User Logs in User Profile should be fetched.
 
 Now we will create Profile Reducer,Action and Component.
 
 First Types for Actions...
 
export const GET_PROFILE="GET_PROFILE";
export const PROFILE_ERROR="PROFILE_ERROR";

Profile Reducer 

import { GET_PROFILE, PROFILE_ERROR } from "../actions/types";

const initialState={
    profile:null,
    profiles:[],
    repos:[],
    loading:true,
    error:{}
}

export default function(state=initialState,action)
{
    const {type, payload}= action;

    switch(type)
    {
        case GET_PROFILE:
            return{
                ...state,
                profile:payload,
                loading:false
            };
            
        case PROFILE_ERROR:
            return{
                ...state,
                error:payload,
                loading:false
            }    
        default:
            return state;
    }
}

********************************************************************************************************************************
Profile Action:.....

import axios from 'axios';
import {setAlert} from './alert';
import {GET_PROFILE,PROFILE_ERROR} from './types';

export const getCurrentProfile = () => async dispatch =>{
    try {
        //No need to pass id as it will get it from token..
        const res = await axios.get('http://localhost:5000/api/profile/me');
        dispatch({
            type:GET_PROFILE,
            payload:res.data
        });
    } catch (error) {
        dispatch({
            type:PROFILE_ERROR,
            payload:{msg:error.response.statusText,status:error.response.status}
        });
    }
}

************************************************************************************************************************
Now we need to dispatch this action as soon as user goes to dashboard component....

import React,{useEffect} from 'react'
import PropTypes from 'prop-types'
import {connect} from 'react-redux';
import {getCurrentProfile} from '../../actions/profile';
const Dashboard = (props) => {

    useEffect(()=>{
        props.getCurrentProfile();
    },[])

    return (
        <div>
            Dashboard
        </div>
    )
}

Dashboard.propTypes = {
    getCurrentProfile:PropTypes.func.isRequired,
    auth:PropTypes.object.isRequired,
    profile:PropTypes.object.isRequired,
}
const mapStateToProps = state =>({
    auth:state.auth,
    profile:state.profile
})
export default connect(mapStateToProps,{getCurrentProfile})(Dashboard)
************************************************************************************************************************************
user should not see Landing Page when user is logged in

import React from 'react'
import {Link,Redirect} from 'react-router-dom';
import {connect} from 'react-redux';
import PropTypes from 'prop-types';

const Landing = (props) => {

    if(props.isAuthenticated)
    {
        return <Redirect to='/dashboard'/>
    }
    return (
        <div>
            <section className="landing">
                <div className="dark-overlay">
                    <div className="landing-inner">
                    <h1 className="x-large">Developer Connector</h1>
                    <p className="lead">
                        Create a developer profile/portfolio, share posts and get help from
                        other developers
                    </p>
                    <div className="buttons">
                        <Link to="/register" className="btn btn-primary">Sign Up</Link>
                        <Link to="/login" className="btn btn-light">Login</Link>
                    </div>
                    </div>
                </div>
            </section>
        </div>
    )
}

Landing.propTypes={
    isAuthenticated:PropTypes.bool.isRequired,
}

const mapStateToProps = state =>({
    isAuthenticated:state.auth.isAuthenticated
});

export default connect(mapStateToProps)(Landing)

*****************************************************************************************************************************





 
 
