1. Understanding JSX:

In the below code we are not using html it is JSX and it is compiled to React.createElement().This is javascript.

class App extends Component {
  render() {
    return (
      <div className="App">
        <h1>Hi, i want to be a react developer!</h1>
      </div>
    );
    
     return React.createElement('div',{className:'App'},
     React.createElement('h1',null,' Hi, I am learning React'));
  }
}

JSX Restrictions:

We are not using the real html tags these are managed by react behind the scenes

***************************************************************************************************************************************
2. Creating a Functional Component:

1. Functional components  

const cmp = () => { return <div>some JSX</div> }

2. class-based components 

class Cmp extends Component 
{ render () { return <div>some JSX</div> } }

****************************************************************************************************************************
3. Outputting Dynamic Content:


We can use Single curly braces to execute one line functions in JSX!

<p>I am a person and i am {Math.floor(Math.random() *30)} years old!</p>
********************************************************************************
Props:

Props basically an object giving us access to all the attributes we pass to our components

In App.js

 <Person name="Sanjay" age="21"></Person>
 
 Getting Data From Parent in Child
 
const person = (props) => {
return <p>I am a {props.name} and i am {props.age} years old!</p>
};

**********************************************************************************
How to handle Content passed in b/w the opening and closing

children refers to any elements b/w the opening and closing tag of our element...

<Person name="Sanjay" age="21">My Hobbies: Coding</Person>
  
  const person = (props) => {
return (
        <div>
            <p>I am a {props.name} and i am {props.age} years old!</p>
            <p>{props.children}</p>
        </div>
)
};
************************************************************************************************************************************
State:

What if we have to output dynamic content based on the data inside the component instead of getting data from outside?

state is only avaiable in class based react components..
Props are set and passed from outside,state is managed from inside component...
With new feature hooks in react we can also manage state in functional components...
we should  use state in components with care as when app grows it becomes difficult to manage the state, prefer functional components
as much as possible.


 state={
    persons:[
      {name:"Sanjay",age:21},
      {name:"Prim",age:22},
      {name:"Sanyam",age:22},
    ]
  }

  render() {
    return (
      <div className="App">
        <h1>Hi, i want to be a react developer!</h1>
        <h2>That's Great Sanjay!</h2>
        <Person name={this.state.persons[0].name} age={this.state.persons[0].age}>My Hobbies: Coding</Person>
        <Person name={this.state.persons[1].name} age={this.state.persons[1].age}>My Hobbies: Coding</Person>
        <Person name={this.state.persons[2].name} age={this.state.persons[2].age}>My Hobbies: Coding</Person>
      </div>
    );
    
State is a special property and it can be changed. When the state changes it will lead react to re-render our DOM or update the DOM..

**************************************************************************************************************************************
Props and State:

1. props  and state  are CORE concepts of React. Actually, only changes in props  and/ or state  trigger React to re-render your components
and potentially update the DOM in the browser.

2. props  allow you to pass data from a parent (wrapping) component to a child (embedded) component.

3. Whilst props allow you to pass data down the component tree (and hence trigger an UI update), state is used to change the component,
well, state from within. Changes to state also trigger an UI update.

**************************************************************************************************************************************
Listening to Click Events:

In App.js  We only pass the reference of function because if we add () then it will call this function when react render the component.

 <button onClick={this.switchNameHandler}>Switch Name</button>
 
 switchNameHandler = () => {
   console.log("Clicked")
  };

Different Events which we can listen

https://www.udemy.com/course/react-the-complete-guide-incl-redux/learn/lecture/8124210#content

************************************************************************************************************************************
Changing State: 

We don't change state directly... Below way is wrong...

 switchNameHandler = () => {
  //  console.log("Hanji Bro")
  this.state.persons[1]="Rishabh";
  };
  
  
  state = {
    persons:[
      {name:"Sanjay",age:21},
      {name:"Prim",age:22},
      {name:"Sanyam",age:22},
    ],
    hobbies:"Coding"
  };

  switchNameHandler = () => {
  // this setState method will only override the properties we are defining below 
  // here it won't changes hobbies and will only override persons
  this.setState({
    persons:[
      {name:"Sanjay Garg",age:21},
      {name:"Prim Garg",age:23},
      {name:"Sanyam Gupta",age:22},
    ]
  })
  };
  Reacts triggers updates DOM if there is change in state or props
  
  *********************************************************************************************************************************

