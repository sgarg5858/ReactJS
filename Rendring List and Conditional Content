First Way To Render Conditional Content using single curly brackets {}
 state = {
    persons: [
      { name: 'Sanjay', age: 22 },
      { name: 'Prim', age: 23 },
      { name: 'Sanyam', age: 23 }
    ],
    otherState: 'some other value',
    showPersons : false
  };
  
  togglePersonsHandler = () => {
    const doesShow = this.state.showPersons;
    this.setState({
      showPersons : !doesShow
    })
  };
  
   <Button style={{marginBottom:"2px"}}
         variant="outline-dark" onClick={this.togglePersonsHandler}>
           {this.state.showPersons === true ? 'Hide Persons' : 'Show Persons' }</Button>
           
        {
        this.state.showPersons === true ?
          <div>
          <Person
            name={this.state.persons[0].name}
            age={this.state.persons[0].age}
            click={this.switchNameHandler.bind(this,'Sanjay Garg')}
          />
          <Person
            name={this.state.persons[1].name}
            age={this.state.persons[1].age}
            changed={this.nameChangedHandler}
          >
          </Person>
          <Person
            name={this.state.persons[2].name}
            age={this.state.persons[2].age}
          />
        </div> : null
        }
        
 **********************************************************************
(Preffered) Alternate Way:  For nested conditions In above method it might not be easy to keep track
 
 When there is any change in state then render() is called so using it
 
 render() {

    let persons =null;

    if(this.state.showPersons)
    {
      persons=(
        <div>
        <Person
          name={this.state.persons[0].name}
          age={this.state.persons[0].age}
          click={this.switchNameHandler.bind(this,'Sanjay Garg')}
        />
        <Person
          name={this.state.persons[1].name}
          age={this.state.persons[1].age}
          changed={this.nameChangedHandler}
        >
        </Person>
        <Person
          name={this.state.persons[2].name}
          age={this.state.persons[2].age}
        />
      </div> 
      )
    }

    return (
      <div className="App">
        <h1>Hi, I'm a React App</h1>
        <p>This is really working!</p>
        <Button style={{marginBottom:"2px"}}
         variant="outline-dark" onClick={this.togglePersonsHandler}>
           {this.state.showPersons === true ? 'Hide Persons' : 'Show Persons' }</Button>
           {persons}
      </div>
      
     );
****************************************************************************************************************************
Outputting Lists:

Using Vanilla Javascript we are outputting a list by mapping an array into an array with jsx elements

 if(this.state.showPersons)
    {
      persons=(
        <div>
          {this.state.persons.map( (person) => {
            return <Person name={person.name} age={person.age}></Person>
          })}
       
      </div> 
      )
    }
****************************************************************************************************************************** 

 if(this.state.showPersons)
    {
      persons=(
        <div>
          {this.state.persons.map( (person,index) => {
            return <Person 
            click={() => this.deletePersonHandler(index)} 
            name={person.name} 
            age={person.age} ></Person>
          })}
      </div> 
      )
    }


  deletePersonHandler = (index) => {
    // const persons =this.state.persons.slice();
    //should always update in an immutable fashion
    const persons=[...this.state.persons];
    persons.splice(index,1);
    this.setState({
      persons:persons
    })
  };
  
*****************************************************************************************************************************
  IMP => List and Keys:
  
  In short key should be
  
  Unique - A key cannot be identical to that of a sibling component.
  Static - A key should not ever change between renders.

  
  https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js
  
  The key property is an important property while rendering the list of data..Its a default property react expects to find on
  element no matter custom or html element when you are rendering list.
  This key property helps react update the list efficiently.
  
  React has something virtual DOM where it compares what it would render now if it were to call render method now.
  React basically compares the elements of Future with the past....
  
  if(this.state.showPersons)
    {
      persons=(
        <div>
          {this.state.persons.map( (person,index) => {
            return <Person 
            click={() => this.deletePersonHandler(index)} 
            name={person.name} 
            age={person.age} 
            key={person.id}                            check here
            />
          })}
      </div> 
      )
    }
*****************************************************************************************************************************
Flexible Lists:

 nameChangedHandler = (event,id) => {
    const personIndex=this.state.persons.findIndex(p => {
      return p.id === id;
    });
    //arrays and objects are of reference types
    const person = {
      ...this.state.persons[personIndex]};

    person.name=event.target.value;

    const persons= [...this.state.persons];
    persons[personIndex]=person;

    this.setState({
    persons: persons
  })
  };
  
    if(this.state.showPersons)
    {
      persons=(
        <div>
          {this.state.persons.map( (person,index) => {
            return <Person 
            click={() => this.deletePersonHandler(index)} 
            name={person.name} 
            age={person.age} 
            key={person.id}
            changed={(event) => this.nameChangedHandler(event, person.id)}
            />
          })}
      </div> 
      )
    }
    
    const person = (props) => {
return (
    <div style={{textAlign:"center"}} >
        <Card style={{ width: '50rem',height:'9rem',textAlign:'center',marginBottom:'3px' }}>
            <Card.Body style={{textAlign:'center'}}>
                    <p onClick={props.click}>I am a {props.name} and i am {props.age} years old!</p>
                    <p>{props.children}</p>
                    <input type="text" value={props.name} onChange={props.changed}></input>
            </Card.Body>
        </Card>
    </div>    
)
};
